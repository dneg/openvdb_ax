%{
    ///////////////////////////////////////////////////////////////////////////
    //
    // Copyright (c) 2015-2018 DNEG Visual Effects
    //
    // All rights reserved. This software is distributed under the
    // Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
    //
    // Redistributions of source code must retain the above copyright
    // and license notice and the following restrictions and disclaimer.
    //
    // *     Neither the name of DNEG Visual Effects nor the names
    // of its contributors may be used to endorse or promote products derived
    // from this software without specific prior written permission.
    //
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
    // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    // IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
    // LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
    //
    ///////////////////////////////////////////////////////////////////////////

    #include <openvdb_ax/ast/AST.h>
    #include <openvdb_ax/Exceptions.h>

    #include "axparser.h" /*generated by bison*/
%}

%option noyywrap
%option nounput

%%

";"                         { return SEMICOLON; }
"@"                         { return AT; }
"$"                         { return DOLLAR; }

"="                         { return EQUALS; }

"+"                         { return PLUS; }
"-"                         { return MINUS; }
"*"                         { return MULTIPLY; }
"/"                         { return DIVIDE; }
"%"                         { return MODULO; }

"&"                         { return BITAND; }
"|"                         { return BITOR; }
"^"                         { return BITXOR; }
"~"                         { return BITNOT; }

"=="                        { return EQUALSEQUALS; }
"!="                        { return NOTEQUALS; }
">"                         { return MORETHAN; }
"<"                         { return LESSTHAN; }
">="                        { return MORETHANOREQUAL; }
"<="                        { return LESSTHANOREQUAL; }

"+="                        { return PLUSEQUALS; }
"-="                        { return MINUSEQUALS; }
"*="                        { return MULTIPLYEQUALS; }
"/="                        { return DIVIDEEQUALS; }
"++"                        { return PLUSPLUS; }
"--"                        { return MINUSMINUS; }

"&&"                        { return AND; }
"||"                        { return OR; }
"!"                         { return NOT; }

","                         { return COMMA; }

"("                         { return LPARENS; }
")"                         { return RPARENS; }
"{"                         { return LCURLY; }
"}"                         { return RCURLY; }

"bool"                      { return BOOL; }
"short"                     { return SHORT; }
"int"                       { return INT; }
"long"                      { return LONG; }
"float"                     { return FLOAT; }
"double"                    { return DOUBLE; }
"string"                    { return STRING; }

"vec3i"                     { return VEC3I; }
"vec3f"                     { return VEC3F; }
"vec3d"                     { return VEC3D; }

".x"                        { return DOT_X; }
".y"                        { return DOT_Y; }
".z"                        { return DOT_Z; }
".r"                        { return DOT_X; }
".g"                        { return DOT_Y; }
".b"                        { return DOT_Z; }

"v@"                        { return V_AT; }
"f@"                        { return F_AT; }
"i@"                        { return I_AT; }
"s@"                        { return S_AT; }

"v$"                        { return V_DOLLAR; }
"f$"                        { return F_DOLLAR; }
"i$"                        { return I_DOLLAR; }
"s$"                        { return S_DOLLAR; }

"vector"                    { return VEC3F; } /*VEX SUPPORT TOKENS*/

"if"                        { return IF; }
"else"                      { return ELSE; }

"true"                      { return TRUE; }
"false"                     { return FALSE; }

"return"                    { return RETURN; }

[ \t]                       /* ignore whitespace */
"//".*                      /* ignore //-style one-line comments */
\n                          /* ignore newlines */

\"(\\.|[^\\"])*\"                       {
                                            // NOTE: Whilst the regex supports escaped characters, we do not yet unescape them.
                                            yylval.value_string = strndup(yytext+1, yyleng-2);
                                            return L_STRING;
                                        }

[0-9]+s                                 {
                                            yylval.value_string = strdup(yytext);
                                            return L_SHORT;
                                        }

[0-9]+                                  {
                                            yylval.value_string = strdup(yytext);
                                            return L_INT;
                                        }

[0-9]+l                                 {
                                            yylval.value_string = strdup(yytext);
                                            return L_LONG;
                                        }

[0-9]+"."[0-9]*f                        |
"."[0-9]+f                              |
[0-9]+("."[0-9]+)?[e|E][-|+]?[0-9]+f    {
                                            yylval.value_string = strdup(yytext);
                                            return L_FLOAT;
                                        }

[0-9]+"."[0-9]*                         |
"."[0-9]+                               |
[0-9]+("."[0-9]+)?[e|E][-|+]?[0-9]+     {
                                            yylval.value_string = strdup(yytext);
                                            return L_DOUBLE;
                                        }

[_a-zA-Z][_a-zA-Z0-9]*                  {
                                            yylval.value_string = strdup(yytext);
                                            return IDENTIFIER;
                                        }

.                           {
                                /* error on everything else */
                                // note that this doesn't call through to yyerrror
                                // and immediatelly fails. This allows us to catch errors
                                // correctly, but there may be a better way of doing this
                                // (yyterminate() returns success)
                                OPENVDB_THROW(openvdb::LLVMSyntaxError, "Invalid character " + std::string(yytext, yyleng));
                            }

%%

// Copyright (c) 2015-2018 DNEG Visual Effects
// All rights reserved. This software is distributed under the
// Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
